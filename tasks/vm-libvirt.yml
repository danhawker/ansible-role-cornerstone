---
- name: "Set facts"
  set_fact:
    vm_state: "{{cornerstone_vm_state}}"

- name: "Status of VM on Libvirt host"
  virt:
    name: '{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}' 
    command: status
  register: vm_status
  ignore_errors: true
  when:
    - vm_state == 'absent'

- name: "Remove vm if dict object marked as absent"
  block:
    - name: "Stop VM on Libvirt host"
      virt:
        name: '{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}' 
        command: destroy
      ignore_errors: true
      when:
        - vm_status.status != 'shutdown'

    - name: "Undefine VM from Libvirt host"
      virt:
        name: '{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}' 
        command: undefine
      ignore_errors: true

    - name: "Remove VM files"
      file:
        path: '{{ cornerstone_vm_location }}{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}.{{ cornerstone_vm_libvirt_file_type }}'
        state: absent
      ignore_errors: true

    - name: "Remove VM data disk"
      file:
        path: '{{ cornerstone_vm_location }}{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}-datadisk.{{ cornerstone_vm_libvirt_file_type }}'
        state: absent
      ignore_errors: true
      when:
        - cornerstone_vm_data_disk == true

  ignore_errors: true
  when:
    - vm_state == 'absent'
    

- name: "Create new VM"
  block:
    # Create VMs
    - name: "get VM disks"
      command: "ls {{ cornerstone_vm_location }}"
      register: disks
      changed_when: "disks.rc != 0"
    
    - name: "Create working directories"
      file: path={{ cornerstone_working_dir }}{{ cornerstone_vm_name }} state=directory
      when: 
        - cornerstone_vm_name not in disks.stdout
     
    - name: "Clone Image"
      command: >
               virt-clone --connect qemu:///system --original {{ cornerstone_vm_libvirt_template }} 
               --name {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }} 
               --file {{ cornerstone_vm_location }}{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}.{{ cornerstone_vm_libvirt_file_type }} 
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'
    
    - name: "Create Empty VM xml"
      shell: virt-install 
               -n {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }} 
               --os-type=Linux 
               --os-variant={{ cornerstone_vm_libvirt_vmos }} 
               --ram={{ cornerstone_vm_libvirt_vmmem }} 
               --vcpus={{ cornerstone_vm_libvirt_vmcores }} 
               --disk path={{ cornerstone_vm_location }}{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}.{{ cornerstone_vm_libvirt_file_type }},bus=virtio,size={{ cornerstone_vm_os_disk_size }}
               --print-xml >{{ cornerstone_working_dir }}{{ cornerstone_vm_name }}/{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}.xml
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype == "emptyvm"
        - cornerstone_vm_state == 'present'

    - name: "Define VM"
      virt:
          name: "{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}"
          command: define
          xml: "{{ lookup('file', '{{ cornerstone_working_dir }}{{ cornerstone_vm_name }}/{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}.xml') }}"
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype == "emptyvm"
        - cornerstone_vm_state == 'present'
    
    - name: "Set memory For VMs"
      shell: "virt-xml --memory {{ cornerstone_vm_libvirt_vmmem }} {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }} --edit"
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'
    
    - name: "Set vCPUs For VMs"
      shell: "virt-xml --vcpu {{ cornerstone_vm_libvirt_vmcores }} {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }} --edit"
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'
    
    - name: "Increase disk sizes"
      shell: "qemu-img resize {{ cornerstone_vm_location }}{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}.{{ cornerstone_vm_libvirt_file_type }} +{{ cornerstone_vm_os_disk_size }}G"
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'

    - name: "Create additional data disk."
      shell: "qemu-img create -o preallocation=full -f {{ cornerstone_vm_libvirt_file_type }} {{ cornerstone_vm_location }}{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}-datadisk.{{ cornerstone_vm_libvirt_file_type }} {{ cornerstone_vm_data_disk_size }}"
      when:
        - cornerstone_vm_data_disk == true 
        - cornerstone_vm_data_disk_size is defined
        - cornerstone_vm_name not in disks.stdout
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'

    - name: "Create network configuration for each VM"
      shell: echo -e "BOOTPROTO=static
             \nDEVICE=eth0
             \nONBOOT=yes
             \nTYPE=Ethernet
             \nIPADDR={{ cornerstone_vm_ip }}
             \nPREFIX=24
             \nGATEWAY={{ cornerstone_vm_gateway }}
             \nDNS1={{ cornerstone_vm_dns1 }}
             \nDNS2={{ cornerstone_vm_dns2 }}
             \nDOMAIN={{ cornerstone_public_private_domain_name }}" >>{{ cornerstone_working_dir }}{{ cornerstone_vm_name }}/ifcfg-eth0
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'
    
    - name: "Create hostfile entry"
      shell: echo -e "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
             \n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6 
             \n{{ cornerstone_vm_ip }}         {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }} {{ cornerstone_vm_name }}
             " >>{{ cornerstone_working_dir }}{{ cornerstone_vm_name }}/hosts
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'
    
    - name: "Set Hostname and Copy in network configuration"
      shell: "virt-customize --hostname {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }} --copy-in {{ cornerstone_working_dir }}{{ cornerstone_vm_name }}/ifcfg-eth0:/etc/sysconfig/network-scripts/ --copy-in {{ cornerstone_working_dir }}{{ cornerstone_vm_name }}/hosts:/etc/ --edit /etc/ssh/sshd_config:'s/^#UseDNS yes/UseDNS no/' -d {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}"
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'
    
    # Need to fix this inline with cornerstone process
    - name: "Check if root ssh keys generated"
      stat: path=/root/.ssh/id_rsa.pub
      register: root_ssh
    
    # Need to make sure the --selinux-relabel is inplace https://bugzilla.redhat.com/show_bug.cgi?id=1378311
    - name: "Copy in ssh keys and relabel for newer version of RHEL 7"
      shell: "virt-customize --ssh-inject root:file:/root/.ssh/id_rsa.pub --selinux-relabel -d {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}"
      when: 
        - cornerstone_vm_name not in disks.stdout 
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'
    
          #    - cornerstone_vm_libvirt_template == 'rhel7-image'
    
    # If a new image is created you will need to run the following command on the image else you wont be able to ssh to the cloned systems.
    # For some very strange reason old rhel7.1 images do not work if you just run the command below, you still need to login to the OS and
    # manually restart the sshd service. The systemctl restart sshd does not work in the run command below.
    #
    # virt-customize --ssh-inject root:file:/root/.ssh/id_rsa.pub \
    # --run-command 'sed -i "s/^#PermitRootLogin\ yes/PermitRootLogin\ yes/" /etc/ssh/sshd_config' \ 
    # --run-command 'sed -i "s/SELINUX=enforcing/SELINUX=permissive/" /etc/selinux/config' \ 
    # --run-command 'echo password| passwd root --stdin' \ 
    # --run-command 'systemctl restart sshd' \ 
    # -d <name of image>
    #
    #- name: "Copy in ssh keys and not selinux relabel"
    #  shell: "virt-customize --ssh-inject root:file:/root/.ssh/id_rsa.pub -d {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}"
    #  when:
    #    - cornerstone_vm_name not in disks.stdout
    #    - cornerstone_vm_libvirt_vmtype != "emptyvm"
    #    - cornerstone_vm_state == 'present'
    #    - cornerstone_vm_libvirt_template == 'rhel7.1-image'
    
    
    - name: "Clean up working files"
      file: path={{ cornerstone_working_dir }}{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }} state=absent
      when: 
        - cornerstone_vm_name not in disks.stdout 
    
    - name: "Start VM on Libvirt host"
      virt:
        name: '{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}'
        state: running
      when:
        - cornerstone_vm_state == 'present'
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
    
    - name: "Attach additional data disk to VM."
      shell: "virsh attach-disk {{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }} {{ cornerstone_vm_location }}{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}-datadisk.{{ cornerstone_vm_libvirt_file_type }} {{ cornerstone_vm_data_disk_dev | default('vdb') }} --cache none"
      when:
        - cornerstone_vm_data_disk == true
        - cornerstone_vm_data_disk_size is defined
        - cornerstone_vm_name not in disks.stdout
        - cornerstone_vm_libvirt_vmtype != "emptyvm"
        - cornerstone_vm_state == 'present'
  when:
    - vm_state == 'present'

- name: "Set facts for chceking how many nics to add"
  set_fact:
    vm_extra_nics: "{{cornerstone_vm_extra_nics}}"

- name: "Add additional nics"
  block:
    - name: "Check if the correct number of nics have already been added."
      shell:
        cmd: 'virsh dumpxml basicvm.kenlab.local | grep "mac address" | wc -l'
      ignore_errors: yes
      register: vm_nic_num
    
    - name: "Work out the expected nics"
      set_fact:
        expected_nics: "{{cornerstone_vm_extra_nics|int +1}}"
        required_nics: "{{cornerstone_vm_extra_nics|int +1 - vm_nic_num|int }}"
        dom_name: "{{ cornerstone_vm_name }}.{{ cornerstone_public_private_domain_name }}"
        net_source: "{{ cornerstone_vm_netname }}"
    
    - name: "debugging"
      debug:
        msg: "number of current nics = {{vm_nic_num.stdout}}, number of required nics is {{cornerstone_vm_extra_nics|int +1}}. Number of nics to add {{required_nics}}"
    
    - name: "Attach addidtional nics if required."
      shell:
        cmd: "virsh attach-interface --domain {{dom_name}} --type network \
            --source {{net_source}} --model virtio --persistent --config --live"
      ignore_errors: true
      loop: "{{ query('sequence', 'start=1 end='+(required_nics|string)) }}"
      when:     
        - vm_nic_num.stdout is defined
        - vm_nic_num.stdout|int < expected_nics|int
  when:
    - vm_state == 'present'
    - vm_extra_nics is defined
    - vm_extra_nics|int > 0